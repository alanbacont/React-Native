{"ast":null,"code":"var _jsxFileName = \"/Users/alancontreras/Documents/GitHub/React-Native/src/components/hooks/Formularios.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Formularios = () => {\n  _s();\n\n  const [formulario, setFormulario] = useState({\n    email: 'test@test.com',\n    password: '123456'\n  });\n\n  const onChange = (value, campo) => {\n    //FIC: llamado a la función que cambia el useState\n    setFormulario({ //FIC: desestructuramos los valores del useState\n      ...formulario,\n      //FIC: aqui es como si estuvieramos mandando\n      //el atributo email o password. Dicho de otro modo\n      //los [] computan es decir compara el valor que trae\n      //el parametro \"campo\" y lo relaciona con el valor del\n      //useState. Por ultimo si encontro un atributo que se llame\n      //igual le asigna el valor que trae el parametro \"value\"\n      //de la funcion onChange.\n      [campo]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Formulario\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"Email\",\n      value: formulario.email,\n      onChange: _ref => {\n        let {\n          target\n        } = _ref;\n        return onChange(target.value, 'email');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control mt-2 mb-2\",\n      placeholder: \"Password\",\n      value: formulario.password,\n      onChange: _ref2 => {\n        let {\n          target\n        } = _ref2;\n        return onChange(target.value, 'password');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Formularios, \"8KTk60DreC7XNfDEddYkoi4dRoA=\");\n\n_c = Formularios;\n\nvar _c;\n\n$RefreshReg$(_c, \"Formularios\");","map":{"version":3,"names":["useState","Formularios","formulario","setFormulario","email","password","onChange","value","campo","target"],"sources":["/Users/alancontreras/Documents/GitHub/React-Native/src/components/hooks/Formularios.tsx"],"sourcesContent":["import { useState } from \"react\"\n\nexport const Formularios = () => {\n    const [formulario, setFormulario] = useState({\n        email: 'test@test.com',\n        password: '123456'\n    })\n    const onChange = (value:string, campo:string) => {\n        //FIC: llamado a la función que cambia el useState\n        setFormulario({\n            //FIC: desestructuramos los valores del useState\n            ...formulario,\n            //FIC: aqui es como si estuvieramos mandando\n            //el atributo email o password. Dicho de otro modo\n            //los [] computan es decir compara el valor que trae\n            //el parametro \"campo\" y lo relaciona con el valor del\n            //useState. Por ultimo si encontro un atributo que se llame\n            //igual le asigna el valor que trae el parametro \"value\"\n            //de la funcion onChange.\n            [campo]: value\n        });\n    }\n    return (\n        <>\n            <h3>\n                Formulario\n            </h3>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Email\"\n                value={formulario.email}\n                onChange={({target})=> onChange(target.value, 'email')}\n            ></input>\n            <input\n                type=\"text\"\n                className=\"form-control mt-2 mb-2\"\n                placeholder=\"Password\"\n                value={formulario.password}\n                onChange={({target})=> onChange(target.value, 'password')}\n            > \n            </input>\n            \n        </>\n    )\n}"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;EAAA;;EAC7B,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAC;IACzCI,KAAK,EAAE,eADkC;IAEzCC,QAAQ,EAAE;EAF+B,CAAD,CAA5C;;EAIA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAeC,KAAf,KAAgC;IAC7C;IACAL,aAAa,CAAC,EACV;MACA,GAAGD,UAFO;MAGV;MACA;MACA;MACA;MACA;MACA;MACA;MACA,CAACM,KAAD,GAASD;IAVC,CAAD,CAAb;EAYH,CAdD;;EAeA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAII;MACI,IAAI,EAAC,MADT;MAEI,SAAS,EAAC,cAFd;MAGI,WAAW,EAAC,OAHhB;MAII,KAAK,EAAEL,UAAU,CAACE,KAJtB;MAKI,QAAQ,EAAE;QAAA,IAAC;UAACK;QAAD,CAAD;QAAA,OAAaH,QAAQ,CAACG,MAAM,CAACF,KAAR,EAAe,OAAf,CAArB;MAAA;IALd;MAAA;MAAA;MAAA;IAAA,QAJJ,eAWI;MACI,IAAI,EAAC,MADT;MAEI,SAAS,EAAC,wBAFd;MAGI,WAAW,EAAC,UAHhB;MAII,KAAK,EAAEL,UAAU,CAACG,QAJtB;MAKI,QAAQ,EAAE;QAAA,IAAC;UAACI;QAAD,CAAD;QAAA,OAAaH,QAAQ,CAACG,MAAM,CAACF,KAAR,EAAe,UAAf,CAArB;MAAA;IALd;MAAA;MAAA;MAAA;IAAA,QAXJ;EAAA,gBADJ;AAuBH,CA3CM;;GAAMN,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}